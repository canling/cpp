#include <iostream>
#include <vector>
#include <unordered_map>
#include  <algorithm>
#include  <limits.h>
using namespace std;
class Solution{    //remove element
public:
    int removeElement(int A[],int n, int elem){
        int j=0;
        for (int i=0;i<n;i++){

           if(A[i]==elem)
            {
                continue;
            }
                A[j]=A[i];
                j++;
        }
        return j;
    }
};

class Solution1{ //remove duplicates from sorted array
public:
     int removeDuplicates(int A[],int len){
        if(len==0)
            return 0;
        int j=0;
        for(int i=1;i<len;i++){
            if(A[j]!=A[i])
            {    
                A[++j]=A[i];
            }


        }
        return j+1;
    }
};

class Solution2{//remove duplicates from sorted array
public:
    int removeDuplicates(int A[],int len){
        if(len==0)
            return 0;
        int j=0,count=0;
        for(int i=1;i<len;i++)
        {
            if(A[j]==A[i])
            {
              count++;
              if(count<2)
                A[++j]=A[i];
            }

            else if(A[j]!=A[i]){
                A[++j]=A[i];
                count=0;
            }
        }
        return j+1;
    }
};
class Solution4{ //plus one
public:
    vector<int> plusone(vector<int> &digits){
        int sum =0;
        int one=1;
        vector<int> res(digits.size(),0);
        for(int i=digits.size()-1;i>=0;i--)
        {
            sum=one+digits[i];
            one=sum/10;
            res[i]=sum%10;
        }
        if(one>0)
            res.insert(res.begin(),one);
        return res;
    }
};

class Solution5{ //Pascal's triangle
public:
    vector<vector<int> > generate(int numRows){

        vector<vector<int> > vals;
        vals.resize(numRows);
        for(int i=0;i<numRows;i++)
        {
            unsigned int j=0;
            vals[i].resize(i+1);
            vals[i][0]=1;
            vals[i][i]=1;
            for(j=1;j<(vals[i].size()-1);j++)
                vals[i][j]=vals[i-1][j-1]+vals[i-1][j];
        }
        return vals;
    }
};

class solution6{
public:
    vector<int> getRow(int row){
        vector<int> elem;
        elem.resize(row+1,1);
        for(int i=0;i<row+1;++i)
        {
            for(int j=i-1;j>=i;--j){

                elem[j]=elem[j]+elem[j-1];
            }
        }
        return elem;
    }
};

class Solution7{ //merge sorted array
public:
    void merge(int A[],int m,int B[],int n){
        int i=m+n-1;
        int j=m-1;
        int k=n-1;
        while (i>=0)
        {
            if(j>=0&&k>=0)
            {
                if(A[j]>B[k]){
                    A[i]=A[j];
                    j--;
                }else{
                    A[i]=B[k];
                    k--;
                }
            }else if(j>=0){
                A[i]=A[j];
                j--;
            }else if(k>=0){
                A[i]=A[k];
                k--;
            }
            i--;
            }
        }

};

class Solution8{ //2sum
public:
    vector<int> twoSum(vector<int> &numbers,int target){
        vector<int> ret;
        if(numbers.size()<=1)
            return ret;
        unordered_map<int,int> myMap;
        for(int i=0;i<numbers.size();++i)
            myMap[numbers[i]]=i;
        for(int i=0;i<numbers.size();++i)
        {
            int rest_val=target-numbers[i];
            if(myMap.find(rest_val)!=myMap.end())
            {
                int index=myMap[rest_val];
                if(index==i)
                    continue;
                if(index<i)
                {
                    ret.push_back(index+1);
                    ret.push_back(i+1);
                    return ret;
                }
                else{

                    ret.push_back(i+1);
                    ret.push_back(index+1);
                    return ret;
                }
            }
        }
    }

};



class Solution9{ //threeSum
public:
    vector<vector<int>>threeSum(vector<int> &num)
    {
        vector<vector<int>> ret;
        if(num.size()<2)
            return ret;

        sort(num.begin(),num.end());

        for(int i=0;i<num.size();i++)
        {
           int j=i+1;
           int k=num.size()-1;
           while(j<k){
            vector<int> curr;
            if((num[i]+num[j]+num[k])==0)
            {
                curr.push_back(num[i]);
                curr.push_back(num[j]);
                curr.push_back(num[k]);
                ret.push_back(curr);
                ++j;
                --k;
                while(j<k && num[j-1]==num[j])
                    ++j;
                while(j<k && num[k]==num[k-1])
                    --k;
            }
            else if(num[i]+num[j]+num[k]<0)
                ++j;
            else
                --k;
           }
           while(i<num.size()-1 && num[i]==num[i+1])
            ++i;
        }
        return ret;

    }

};
class Solution10{//threeSumCloset
public:
    int threeSumCloset(vector<int>&num,int target){
        if(num.size()<2)
            return -1;
        int ret=0;
        int distance=INT_MAX;
        sort(num.begin(),num.end());
        for(int i=0;i<num.size();i++)
        {
            int j=i+1;
            int k=num.size()-1;
            while(j<k){
                int tmp_val=num[i]+num[j]+num[k];
                int tmp_distance;
                if(tmp_val<target)
                {
                    tmp_distance=target-tmp_val;
                    if(tmp_distance<distance)
                    {
                        distance=tmp_distance;
                        ret=num[i]+num[j]+num[k];
                    }
                    ++j;
                }
                else if(tmp_val>target)
                {
                    tmp_distance=tmp_val-target;
                    if(tmp_distance<distance)
                    {
                        distance=tmp_distance;
                        ret=num[i]+num[j]+num[k];
                    }
                    --k;
                }
                else
                {
                   ret=num[i]+num[j]+num[k];
                   return ret;
                }
            }
        }
        return ret;
    }
};

class Solution11{
public:
    vector<vector<int >>fourSum(vector<int >&num,int target){
        vector<vector<int>>ret;
        if(num.size()<3)
            return ret;
        sort(num.begin(),num.end());
        for(int i=0;i<num.size();i++)
        {
            if(i>0&&num[i]==num[i-1])
                continue;
            for(int j=i+1;j<num.size()-2;++j)
            {
                int k=j+1;
                int l=num.size()-1;
                while(k<l){
                    int sum=num[i]+num[j]+num[k]+num[l];
                    if(sum==target){
                        vector<int> tmp;
                        tmp.push_back(num[i]);
                        tmp.push_back(num[j]);
                        tmp.push_back(num[k]);
                        tmp.push_back(num[l]);
                        ret.push_back(tmp);
                        do{++k;}
                        while(k<l&&num[k]==num[k-1]);
                        do{--l;}
                        while(k<l&&num[l]==num[l+1]);
                    }
                    else if(sum<target)
                        ++k;
                    else
                        --l;

                }
            }
        }
        return ret;
    }

};

class Solution12{
public:
    int findMin(vector<int > &num){
        int size=num.size();
        if(size==0)
            return 0;
        else if(size==1)
            return num[0];
        else if(size==2)
            return min(num[0],num[1]);
        int start=0;
        int stop=size-1;
        while(start<stop-1){
            if(num[start]<num[stop])
                return num[start];
            int mid=(start+stop)/2;
            if(num[mid]>num[start])
                start=mid;
            else if(num[mid]<num[start]){
                stop=mid;
            }

        }
        return min(num[start],num[stop]);

    }
};
class Solution13{
public:
    int findMin(vector<int>&num)
    {
        int size=num.size();

        if(size==0)
            return 0;
        else if(size==1)
             return num[0];
        else if(size==2)
            return min(num[0],num[1]);
        int start=0;
        int stop=num.size()-1;
        while(start<stop)
        {
            if(num[start]<num[stop])
                return num[start];
            int mid=(stop+start)/2;
            if(num[mid]>num[start])
                start=mid;
            else if(num[mid]<num[start])
                stop=mid;
            else
                start++;
        }
        return min(num[start],num[stop]);
    }
};

class Solution14P{
public:
    int largestRectangleArea(vector<int> &height){
        vector<int> s;
        height.push_back(0);
        int sum=0;
        int i=0;
        while(i<height.size()){
            if(s.empty()||height[i]>height[s.back()]){
                s.push_back(i);
                i++;
            }

        }
    }
};

class Solution15{
public:
    bool isPalindrome(int x){
        if(x<0)
            return false;
        if(x=0)
            return true;
        else{
            int y=0;
            int tmp=x;
            while(x!=0)
            {
                y=y*10+x%10;
                x=x/10;
            }
            if(y=tmp)
                return true;
            else
                return false;

        }
    }



};
int main()
{
    int  A[5]={1,1,1,3,4};
    int  A1[5]={1,1,1,3,4};
    int  A2[5]={1,1,1,3,4};
    Solution s;
    Solution1 s1;
    Solution2 s2;
    int res=s.removeElement(A,5,1);
    int res1=s1.removeDuplicates(A1,5);
    int res2=s2.removeDuplicates(A2,5);
    printf("%d,%d,%d\n\r",A[0],A[1],res);
    printf("%d,%d,%d\n\r",A1[0],A1[1],res1);
    printf("%d,%d,%d\n\r",A2[0],A2[1],res2);


    vector<int> num,res4;
    num.push_back(4);
    num.push_back(9);
    num.push_back(9);
    Solution4 s4;
    res4=s4.plusone(num);
    for(unsigned int i=0;i<res4.size();i++)
    {
        cout<<res4[i]<<endl;
    }

    Solution5 s5;
    vector<vector<int> > vals;
    vals=s5.generate(5);
    for(int i=0;i<vals.size();i++)
    {
        for(int j=0;j<vals[i].size();j++)
            cout<<vals[i][j]<<" ";
        cout<<endl;
    }
    solution6 s6;
    vector<int> res6;
    res6=s6.getRow(4);
     for(int i=0;i<res6.size();i++)
     {
         cout<<res6[i]<<" ";
     }
     cout<<endl;

    Solution7 s7;
    int A7[11]={1,4,5,6,7};
    int B7[6]={1,4,4,5,5,6};
    s7.merge(A7,5,B7,6);
    for(int i=0;i<11;i++){
        cout<<A7[i]<<" ";

    }
    cout<<endl;

    Solution8 s8;
    vector<int> a8(0);
    a8.push_back(2);
    a8.push_back(1);
    a8.push_back(4);
    a8.push_back(7);
    a8.push_back(9);
    vector<int > res8;
    res8=s8.twoSum(a8,11);
    for(int i=0;i<res8.size();i++)
        cout<<res8[i]<<" ";
    cout<<endl;


    Solution9 s9;
    int a[]={-2,13,-5,-4,-7,8,0,-9,6,7,0,-4,2,1,-2,4};
    vector<vector<int>>vt;
    int len=sizeof(a)/sizeof(int);
    vector<int> t(a,a+len);
    vt=s9.threeSum(t);
    for(auto x:vt){
        cout<<"(";
        for(auto y:x)
            cout<<y<<",";
        cout<<")"<<endl;
    }
    cout<<endl;

    Solution10 s10;
    int res10=s10.threeSumCloset(t,2);
    cout<<res10<<endl;

    Solution11 s11;
    vector<vector<int>> res11;
    int a1[]={-2,13,-5,-4,-7,8,0,-9,6,7,0,-4,2,1,-2,4};
    int len1=sizeof(a1)/sizeof(int);
    vector<int> input(a,a+len1);
    res11=s11.fourSum(input,0);
    for(auto tmp1:res11)
    {
        for(auto tmp2:tmp1)
          cout<<tmp2<<" ";
        cout<<endl;
    }

    Solution13 s13;
    int a13[]={17,3,5,6,9,11,14};
    int len13=sizeof(a13)/sizeof(int);
    vector<int> b13(a13,a13+len13);
    int ret13=s13.findMin(b13);
    cout<<ret13<<endl;

    cout << "Hello world!" << endl;
    return 0;
}
